# ===============================================================================
# Pipeline CI/CD GitHub Actions pour Harry Potter Spell Voice Recognition
# ===============================================================================

name: CI/CD Pipeline

# Déclenchement de la pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Déclenchement manuel

# Variables globales
env:
  PYTHON_VERSION: '3.11'
  DOCKER_IMAGE_NAME: harrypotter-spell-voice
  SONAR_PROJECT_KEY: harrypotter-spell-voice

# Jobs de la pipeline
jobs:
  
  # =========================================================================== 
  # JOB 1: BUILD - Installation et vérification de base
  # ===========================================================================
  build:
    name: 🔨 Build & Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Nécessaire pour SonarCloud
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev libasound2-dev
    
    - name: 📥 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: ✅ Verify installation
      run: |
        python -c "import src.spell_recognition; print('✅ Module spell_recognition importé avec succès')"
        python -c "import flask; print('✅ Flask importé avec succès')"
        python -c "import pytest; print('✅ Pytest importé avec succès')"
    
    - name: 💾 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-deps
        path: |
          requirements.txt
          src/
        retention-days: 1

  # =========================================================================== 
  # JOB 2: UNIT TESTS - Tests unitaires avec couverture
  # ===========================================================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev libasound2-dev
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run unit tests with coverage
      continue-on-error: true
      run: |
        python -m pytest tests/unit/ -v \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=html:htmlcov \
          --cov-report=term-missing \
          --cov-fail-under=70
    
    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
        retention-days: 7
    
    - name: 📈 Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: orgoro/coverage@v3
      with:
        coverageFile: coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}

  # =========================================================================== 
  # JOB 3: REGRESSION TESTS - Tests de non-régression
  # ===========================================================================
  regression-tests:
    name: 🔄 Regression Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev libasound2-dev
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔄 Run regression tests
      continue-on-error: true
      run: |
        python -m pytest tests/regress/ -v \
          --tb=short \
          --durations=10
    
    - name: 📊 Generate regression report
      if: always()
      run: |
        echo "## 🔄 Regression Test Report" > regression_report.md
        echo "- Tests executed: $(python -m pytest tests/regress/ --collect-only -q 2>/dev/null | grep -c test_ || echo '0')" >> regression_report.md
        echo "- Date: $(date)" >> regression_report.md
    
    - name: 📤 Upload regression report
      uses: actions/upload-artifact@v4
      with:
        name: regression-report
        path: regression_report.md

  # =========================================================================== 
  # JOB 4: CODE QUALITY - Vérification style et qualité
  # ===========================================================================
  code-quality:
    name: 📏 Code Quality
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: 🔍 Check with flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: ⚫ Format with black
      run: |
        black src/
    
    - name: 🔀 Sort imports with isort
      run: |
        isort src/
    
    - name: 📝 Commit formatting changes
      if: github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add src/
        git diff --staged --quiet || git commit -m "🎨 Auto-format code with black and isort [skip ci]"
        git push || echo "No changes to commit"
    
    - name: ⚫ Check with black (for PRs)
      if: github.event_name == 'pull_request'
      run: |
        black --check --diff src/ || echo "⚠️ Code needs formatting but continuing..."
    
    - name: 🔀 Check with isort (for PRs)
      if: github.event_name == 'pull_request'
      run: |
        isort --check-only --diff src/ || echo "⚠️ Imports need sorting but continuing..."
    
    - name: 📊 Generate quality report
      if: always()
      run: |
        echo "## 📏 Code Quality Report" > quality_report.md
        echo "### Black formatting" >> quality_report.md
        black --check src/ &>/dev/null && echo "✅ Code properly formatted" >> quality_report.md || echo "⚠️ Formatting applied automatically" >> quality_report.md
        echo "### Import sorting" >> quality_report.md
        isort --check-only src/ &>/dev/null && echo "✅ Imports properly sorted" >> quality_report.md || echo "⚠️ Import sorting applied automatically" >> quality_report.md
        echo "### Flake8 linting" >> quality_report.md
        flake8 src/ --statistics &>/dev/null && echo "✅ No linting issues found" >> quality_report.md || echo "⚠️ Linting issues found" >> quality_report.md

  # =========================================================================== 
  # JOB 5: SONARCLOUD - Analyse qualité et sécurité
  # ===========================================================================
  sonarcloud:
    name: 🔍 SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, code-quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones désactivé pour l'analyse
    
    - name: 📥 Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
    
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
          -Dsonar.python.coverage.reportPaths=coverage.xml

  # =========================================================================== 
  # JOB 6: PACKAGING - Création du package wheel
  # ===========================================================================
  packaging:
    name: 📦 Package Creation
    runs-on: ubuntu-latest
    needs: [unit-tests, regression-tests, code-quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📥 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: 📝 Create setup.py
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        setup(
            name="harrypotter-spell-voice",
            version="1.0.0",
            packages=find_packages(),
            include_package_data=True,
            install_requires=[
                "Flask>=3.0.0",
                "SpeechRecognition>=3.10.0",
            ],
            python_requires=">=3.11",
            author="DevOps Team",
            description="Harry Potter Spell Voice Recognition",
            long_description="Application de reconnaissance vocale de sorts Harry Potter",
            classifiers=[
                "Development Status :: 4 - Beta",
                "Programming Language :: Python :: 3.11",
                "Framework :: Flask",
            ],
        )
        EOF
    
    - name: 🔨 Build package
      run: python -m build
    
    - name: 📤 Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/
        retention-days: 7

  # =========================================================================== 
  # JOB 7: DOCKERIZE - Construction et test image Docker
  # ===========================================================================
  dockerize:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests, regression-tests, code-quality]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏗️ Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
    
    - name: 🧪 Test Docker image
      run: |
        # Test de démarrage
        container_id=$(docker run -d -p 5000:5000 ${{ env.DOCKER_IMAGE_NAME }}:latest)
        echo "Container ID: $container_id"
        
        # Attendre le démarrage
        sleep 30
        
        # Vérifier que le container est en cours d'exécution
        if ! docker ps | grep -q $container_id; then
          echo "❌ Container not running"
          docker logs $container_id
          exit 1
        fi
        
        # Test health check depuis l'hôte
        curl -f http://localhost:5000/health || exit 1
        echo "✅ Health check passed"
        
        # Test page principale depuis l'hôte
        curl -f http://localhost:5000/ || exit 1
        echo "✅ Main page test passed"
        
        # Nettoyage
        docker stop $container_id
        docker rm $container_id
    
    - name: 🔍 Image security scan
      run: |
        # Scan de sécurité basique
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy:latest image ${{ env.DOCKER_IMAGE_NAME }}:latest
    
    - name: 💾 Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > docker-image.tar.gz
    
    - name: 📤 Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: docker-image.tar.gz
        retention-days: 1

  # =========================================================================== 
  # JOB 8: DEPLOY - Déploiement sur Docker Hub
  # ===========================================================================
  deploy:
    name: 🚀 Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: [sonarcloud, packaging, dockerize]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:v1.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📋 Update deployment status
      run: |
        echo "✅ Deployment successful!"
        echo "🐳 Image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
        echo "🔗 Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}"
    
    - name: 📊 Create deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment time**: \`$(date)\`" >> $GITHUB_STEP_SUMMARY

# ===============================================================================
# Configuration des notifications et nettoyage
# ===============================================================================
  
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📢 Success notification
      if: needs.deploy.result == 'success'
      run: |
        echo "🎉 Pipeline completed successfully!"
        echo "✅ All jobs passed"
        echo "🚀 Application deployed to Docker Hub"
    
    - name: ⚠️ Failure notification
      if: failure()
      run: |
        echo "❌ Pipeline failed!"
        echo "🔍 Check the failed jobs for details"